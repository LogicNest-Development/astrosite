---
/**
 * Robust ProductCard:
 * - Accepts either a content collection entry or a plain object.
 * - All fields are optional & safely defaulted.
 *
 * Props (flexible):
 *   - product | entry | item: { data/frontmatter, slug?, url? }
 */
const raw =
  Astro.props.product ??
  Astro.props.entry ??
  Astro.props.item ??
  null;

// Normalize shapes: content-collection entries use .data; some code may pass .frontmatter
const data = raw?.data ?? raw?.frontmatter ?? {};
const slug = raw?.slug ?? data?.slug ?? null;

const title   = data.title   ?? 'Untitled';
const price   = data.price   ?? null;            // string or number; render conditionally
const period  = data.period  ?? null;            // e.g. "/mo" (optional)
const badge   = data.badge   ?? null;            // e.g. "Popular" (optional)
const blurb   = data.blurb   ?? data.description ?? '';
const features = Array.isArray(data.features) ? data.features : [];

const ctaLabel = data.ctaLabel ?? 'Learn more';
let   ctaUrl   = data.ctaUrl   ?? (slug ? `/products/${slug}/` : '#');

// Tiny guard: ensure we always render a non-empty URL
if (typeof ctaUrl !== 'string' || ctaUrl.trim() === '') ctaUrl = '#';
---

<article class="card p-6 rounded-2xl border border-white/10 bg-white/5 hover:bg-white/10 transition">
  {badge && (
    <div class="inline-block text-xs font-semibold px-2 py-1 rounded-full bg-white/10 border border-white/20 mb-3">
      {badge}
    </div>
  )}

  <h3 class="text-xl font-semibold">{title}</h3>

  {blurb && <p class="mt-2 opacity-80">{blurb}</p>}

  {(price || period) && (
    <div class="mt-4 text-2xl font-bold">
      {price ?? 'Contact us'}{period ? <span class="text-base opacity-80">{period}</span> : null}
    </div>
  )}

  {features.length > 0 && (
    <ul class="mt-4 grid gap-2">
      {features.map((f) => (
        <li class="flex items-start gap-2">
          <span aria-hidden="true">âœ“</span>
          <span innerHTML={typeof f === 'string' ? f : String(f)} />
        </li>
      ))}
    </ul>
  )}

  <div class="mt-6">
    <a href={ctaUrl} class="inline-block px-4 py-2 rounded-xl border border-white/20 hover:bg-white/10">
      {ctaLabel}
    </a>
  </div>
</article>
